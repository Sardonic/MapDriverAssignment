
===========================================================================
Final Assignment Linux Report
By Scott B, David J, Jack S.
Team Herugrim
Last Updated: 25/11/14     Version 1.1
===========================================================================

Table of Contents
1.0 About
2.0 Instructions
	2.1 Build
	2.2 Usage
3.0 Updates
4.0 Known Bugs
	4.1 Driver
	4.2 Client/Server
5.0 Components
	5.1 Script
	5.2 Driver
	5.3 Client/Server

===========================================================================
1.0 About
===========================================================================

This file is a report on the collection of Assignments that makes up our
final project for CSI-230 Linux/Unix Programming. This project is split 
into three assignments. The first assignment is to create a script file
and a custom driver. The second assignment is to create a server and a
client using sockets. As of this time, the third assignment is 
undetermined.

===========================================================================
2.0 Instructions
===========================================================================

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
4.1 Build
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

*Driver*: To quickly build the driver, move to the root directory and run
as superuser:
# make build

This will build and register the driver, and create a char device called
/dev/asciimap

For some additional features, like sending genmap.sh's output to the driver,
you may want to turn on the write bits of the driver with a chmod.

Testing the driver: To test the driver, after running make build, simply
run
$ ./test

A map will be printed several times containing ascii art of three very
handsome programmers, if all went according to plan. Basically, if it ran,
everything is in good shape. Some of the output may look like it
could have been an accidental failure, like "Read 0 bytes", but this is
actually good! It's just testing the driver under various conditions. As
long as only *some* of your output looks like that and not *all* of it,
everything is swell. The map should have printed in full exactly twice.

*Client / Server*: For the server stuff, just cd into clientserv/ and run
$ make

(No need to be root, this time)

Then, if you want to test, keep reading. It's a bit more complicated than
just running make test, this time (although not much more complicated!)

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
4.1 Usage
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

*Driver*: You can read from and write to the driver as you would any other
file. There are some neat things you can do with ioctl, too. You can
reset the map back to it's initial state, zero it out completely, or
ask it to check its own consistency. All the ioctl constant declarations
are in asciimap.h.

Also in the folder is a genmap.sh file, which you can run anytime you want
to generate a big map of random characters whenever you want. Args can be
use to specify the desired dimensions of the map, with the first arg being
width and the second being height. Patience -- it can take several seconds
to generate a valid random map.

The testForkExec program gets built along with the driver and such, in the
all target of the makefile. testForkExec either pulls a map from genmap or
carves a map out of a file specified as an arg. Desired width and height
can be specified using the -w and -h options, respectively.

*Client / Server*: This is a bit more complex. In clientserv/, you'll find
several executables:
	* mapserver
	* mapserverg
	* mapclient
	* mapclientg

Simply run a server in one terminal (it doesn't take any options), and then
in another terminal, run the corresponding client. I recommend the *g files
 -- they're quite a bit more fun. The client automatically tries to connect
to localhost, but you can point it at another ip with the -i option. You
can also specify the width and height of the map the game will be played
with with the -w and -h options. To play, get the server and client running,
and then view your processes in another window. You can kill the child
processes spawned by the client (each called something like tmpid * *),
and the client and server will respond. Kill them all, and the game will end.

*** NOTE ****
When we made the server, we weren't sure if it should display the same map
as the client, or the canonical map that was read from the driver. Since
the client knew when the game was over, and we didn't think the server
should show a map different from the map produced by the driver, we kept
the server from filtering the map. This is why the server and client
maps may look different.

To test the game, follow the previous steps to start up the server and
client, and then (in a different terminal) run
$ make test

And watch the fun commence! Every second the game will draw a bit closer
to victory.

The server and client spawn .log files as the game commences. You'll find
them in the same directory as the server/client binaries.

===========================================================================
3.0 Updates
===========================================================================

19/11/14 First version of the report. Much to do. Much to write.
25/11/14 Updated information on some of the components and the known bugs. 

===========================================================================
4.0 Known Bugs
===========================================================================
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
4.1 Driver
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The driver does not call printk() if the prink() is surrounded by an #ifdef
_DEBUG statement. Must have something to do with the makefile.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
4.2 Client/Server
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

When we made the server, we weren't sure if it should display the same map
as the client, or the canonical map that was read from the driver. Since
the client knew when the game was over, and we didn't think the server
should show a map different from the map produced by the driver, we kept
the server from filtering the map. This is why the server and client
maps may look different.

For the client, renaming the child processes is a bit strange. They never
overflow argv[0], but they don't abbreviate themselves if argv[0] is small.
Therefore, if argv[0] is really small, the name will be illegible, and
make test may fail to work.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
4.3 Test C File (testForkExec.c)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Currently it counts tabs as one char, causing the map to appear misaligned.
This may or may not be a bug, but I'm going to fix it anyway, as I don't
like how it looks.

UPDATE:
All characters besides newline which are lower on the ascii table than
space are now turned into spaces, this was the easiest solution that looks
decent.

===========================================================================
5.0 Components
===========================================================================
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
5.1 Script
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The first part of the project is to write a script file called genmap.sh.
This bash script generates a (pseudo)-random rectangular ASCII maps. The
default dimensions of the map are set at 50x50 characters. The width and 
height of the map can be overridden if desired. The maps generated from 
this script contain 50% or more non blank characters. If it generates a 
map that contains more than 50% blank characters, the script will re-run.
It will execute up to ten times before it terminates and prints an error.

The script pulls bytes from /dev/urandom to be used in the map,
then pipes them into base64 to remove bad characters.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
5.2 Driver
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Driver does what driver does. This is a character device driver. It is used 
to read and write out ASCII maps. Write writes to to the driver's buffer 
with the map data supplied. Read returns the map data within the size, 
bounds and map limits. The driver holds a static map that is based off of 
the teams initials. The driver also has a few ioctl() commands to reset the
map to the static, zero out the map, and checking the map for consistency. 

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
5.3 Client/Server
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The Client sends a request to the server asking for a map with out without
a determined with and height. The Server then accepts or denies the reqeust
and generates a map based on the restrictions given. It then returns the 
map or an error to the client.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
5.3 Test C Program (testForkExec.c)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

The test program can either fork/exec genmap.sh, or carve maps out of
files. The -w, -h, and -l options can be specified with numbers indicating
width, height, and starting line number respectively. By default the width
and height are 10, and the line number is 1. If given no non-option
arguments, genmap.sh is forked and exec'd. If given non-option arguments
it forks processes for each argument and tries to open the file named after
the argument. If a file is not found, or the arguments are misused, it
prints a usage message.
